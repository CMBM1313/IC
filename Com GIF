{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOwUhI6FqvUMjQ4kfV1jhXG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":765,"output_embedded_package_id":"13nrtQI3F5wtdgDL_L11_W42d5sCh9vcZ"},"id":"gy1voVgjFuVs","executionInfo":{"status":"ok","timestamp":1740054191078,"user_tz":180,"elapsed":435439,"user":{"displayName":"Charles Magnus Brito Maya","userId":"15827407630013413864"}},"outputId":"82be9461-fc30-401f-e942-6f6038567b70"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import imageio\n","from IPython.display import display, Image\n","\n","def Alpha(M, V, G, up, down):\n","    phi = np.zeros([G, M, M])\n","    phi[:, 0, :] = V\n","    phi[:, M - 1, :] = V\n","    phi[:, :, 0] = V\n","    phi[:, :, M - 1] = V\n","\n","    phi[:, up:down, up:down] = -V\n","    phiprime = np.empty([G, M, M], float)\n","\n","    phiprime[:, 0, :] = phi[:, 0, :]\n","    phiprime[:, M - 1, :] = phi[:, M - 1, :]\n","    phiprime[:, :, 0] = phi[:, :, 0]\n","    phiprime[:, :, M - 1] = phi[:, :, M - 1]\n","    phiprime[:, up:down, up:down] = phi[:, up:down, up:down]\n","    return phi, phiprime\n","\n","def Beta(phi, phiprime, Dom, frames, up, down):\n","    for i in range(frames):\n","        phiprime = (np.roll(phi, 1, axis=1) + np.roll(phi, -1, axis=1) + np.roll(phi, 1, axis=2) + np.roll(phi, -1, axis=2)) / 4\n","        phiprime[i, 0, :] = phi[i, 0, :]\n","        phiprime[i, Dom - 1, :] = phi[i, Dom - 1, :]\n","        phiprime[i, :, 0] = phi[i, :, 0]\n","        phiprime[i, :, Dom - 1] = phi[i, :, Dom - 1]\n","        phiprime[i, up:down, up:down] = phi[i, up:down, up:down]\n","        if i == frames-1:\n","            return phi, phiprime\n","        phi[i+1, :, :] = phiprime[i, :, :]\n","        phiprime[i+1, :, :] = phi[i, :, :]\n","    return phi, phiprime\n","\n","def save_gif(phi, filename=\"BabyV^2.gif\"):\n","    frames = []\n","    for i in range(phi.shape[0]):\n","        plt.figure(figsize=(6, 6))\n","        plt.imshow(phi[i], cmap='viridis', origin='lower')\n","        plt.colorbar()\n","        plt.title(f\"Frame {i}\")\n","        plt.savefig(f\"frame_{i}.png\")\n","        plt.close()\n","        frames.append(imageio.imread(f\"frame_{i}.png\"))\n","    imageio.mimsave(filename, frames, duration=0.0001)\n","    print(f\"GIF saved as {filename}\")\n","    display(Image(filename))\n","\n","#Parâmetros\n","Potencial = 1.0\n","Dominio = int(input(\"Digite a dimensão da matriz desejada: \"))\n","Frame = int(input(\"Digite o número de frames do GIF: \"))\n","UP = int(input(\"Digite a diagonal inicial do quadradro: \"))\n","Down = int(input(\"Digite a diagonal final do quadradro: \"))\n","\n","#Execução\n","phi, phiprime = Alpha(Dominio, Potencial, Frame, UP, Down)\n","phi, phiprime = Beta(phi, phiprime, Dominio, Frame, UP, Down)\n","\n","#Salvar o GIF\n","save_gif(phi)\n"]}]}