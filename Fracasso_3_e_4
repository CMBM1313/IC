{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNYpOz9HbXWPugyTrN/H5Jt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import time\n","\n","def Alpha(M, V, g):\n","    phi = np.zeros([M, M, g])\n","    phi[0, :, :] = V\n","    phi[M - 1, :, :] = V\n","    phi[:, 0, :] = V\n","    phi[:, M - 1, :] = V\n","\n","    phi[120:133, 120:133] = -V\n","    phiprime = np.empty([M, M, g], float)\n","\n","    phiprime[0, :, :] = phi[0, :, :]\n","    phiprime[M - 1, :, :] = phi[M - 1, :, :]\n","    phiprime[:, 0, :] = phi[:, 0, :]\n","    phiprime[:, M - 1, :] = phi[:, M - 1, :]\n","    phiprime[120:133, 120:133, :] = phi[120:133, 120:133, :]\n","    return phi, phiprime\n","\n","\n","def hate1(phi, phiprime, delta, M, target):\n","    f = 0\n","    while delta > target:\n","\n","        phiprime = (np.roll(phi, 1, axis=0) + np.roll(phi, -1, axis=0) + np.roll(phi, 1, axis=1) + np.roll(phi, -1,axis=1)) / 4\n","        phiprime[0, :, 0] = phi[0, :, 0]\n","        phiprime[M - 1, :, 0] = phi[M - 1, :, 0]\n","        phiprime[:, 0, 0] = phi[:, 0, 0]\n","        phiprime[:, M - 1, 0] = phi[:, M - 1, 0]\n","        phiprime[120:133, 120:133, 0] = phi[120:133, 120:133, 0]\n","        f = f + 1\n","        delta = np.max(np.abs(phi - phiprime)) # Q?\n","        phi[:, :, 0] = phiprime[:, :, 0]\n","        phiprime[:, :, 0] = phi[:, :, 0]\n","    return f\n","\n","\n","\n","def hate(phi, phiprime, delta, M, target, p):\n","    f = 0\n","    while delta > target:\n","        phiprime = (np.roll(phi, 1, axis=0) + np.roll(phi, -1, axis=0) + np.roll(phi, 1, axis=1) + np.roll(phi, -1,axis=1)) / 4\n","        phiprime[0, :, 0] = phi[0, :, 0]\n","        phiprime[M - 1, :, 0] = phi[M - 1, :, 0]\n","        phiprime[:, 0, 0] = phi[:, 0, 0]\n","        phiprime[:, M - 1, 0] = phi[:, M - 1, 0]\n","        phiprime[120:133, 120:133, 0] = phi[120:133, 120:133, 0]\n","        f = f + 1\n","\n","        delta = np.max(np.abs(phi - phiprime)) # Q?\n","        if f <= 250 or ((p//2)-125)<=f<=((p//2)+125) or f<=((p//2)-250):\n","            np.roll(phi, 1, axis=2)\n","            np.roll(phiprime, 1, axis=2)\n","            phi[:, :, 0] = phiprime[:, :, 1]\n","            phiprime[:, :, 0] = phi[:, :, 1]\n","\n","        else:\n","          phi[:, :, 0] = phiprime[:, :, 0]\n","          phiprime[:, :, 0] = phi[:, :, 0]\n","    return phi, phiprime\n","\n","\n","# Constants\n","M = 250  # tamanho do dominio #250\n","V = 1.0  # potêncial\n","L = 750\n","target = 1e-5  # mínimo\n","delta = 1.0\n","p = 1\n","\n","phi, phiprime = Alpha(M, V, p)\n","p = hate1(phi, phiprime, delta, M, target)\n","\n","phi2, phiprime2 = Alpha(M, V, L)\n","phi, phiprime = hate(phi2, phiprime2, delta, M, target, p)\n","\n","print(tic)\n","print(time.time() - tic)\n","print(len(phiprime))\n","plt.imshow(phi[:,:,0])\n","plt.colorbar()\n","plt.show()\n","print(g)"],"metadata":{"id":"BLjNwl3l5EsF"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x0Zk0oFtpC_p","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1735086950073,"user_tz":180,"elapsed":1069,"user":{"displayName":"Charles Magnus Brito Maya","userId":"15827407630013413864"}},"outputId":"3e90d0af-95a8-46b6-c643-7c36619b4c4b","collapsed":true},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"error","ename":"IndexError","evalue":"index 1 is out of bounds for axis 2 with size 1","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-2a197fee2d5f>\u001b[0m in \u001b[0;36m<cell line: 60>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     58\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0mphi2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphiprime2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAlpha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mV\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 60\u001b[0;31m \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mphi2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphiprime2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdelta\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m \u001b[0mphi2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mphiprime2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAlpha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mV\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mL\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-3-2a197fee2d5f>\u001b[0m in \u001b[0;36mhate\u001b[0;34m(phi, phiprime, delta, M, target, p)\u001b[0m\n\u001b[1;32m     40\u001b[0m             \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroll\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mphiprime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m             \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mphi\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     43\u001b[0m             \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolorbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     44\u001b[0m             \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: index 1 is out of bounds for axis 2 with size 1"]}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import time\n","\n","\n","def Alpha(M, V, g):\n","    phi = np.zeros([M, M, g])\n","    phi[0, :, :] = V\n","    phi[M - 1, :, :] = V\n","    phi[:, 0, :] = V\n","    phi[:, M - 1, :] = V\n","\n","    phi[120:133, 120:133] = -V\n","    phiprime = np.empty([M, M, g], float)\n","\n","    phiprime[0, :, :] = phi[0, :, :]\n","    phiprime[M - 1, :, :] = phi[M - 1, :, :]\n","    phiprime[:, 0, :] = phi[:, 0, :]\n","    phiprime[:, M - 1, :] = phi[:, M - 1, :]\n","    phiprime[120:133, 120:133, :] = phi[120:133, 120:133, :]\n","    return phi, phiprime\n","\n","\n","def hate(phi, phiprime, delta, M, target, p):\n","    f = 0\n","    while delta > target:\n","        phiprime = (np.roll(phi, 1, axis=0) + np.roll(phi, -1, axis=0) + np.roll(phi, 1, axis=1) + np.roll(phi, -1,axis=1)) / 4\n","        phiprime[0, :, 0] = phi[0, :, 0]\n","        phiprime[M - 1, :, 0] = phi[M - 1, :, 0]\n","        phiprime[:, 0, 0] = phi[:, 0, 0]\n","        phiprime[:, M - 1, 0] = phi[:, M - 1, 0]\n","        phiprime[120:133, 120:133, 0] = phi[120:133, 120:133, 0]\n","        f = f + 1\n","\n","        delta = np.max(np.abs(phi - phiprime)) # Q?\n","        if f <= 250 or ((p//2)-125)<=f<=((p//2)+125) or f<=((p//2)-250):\n","            phi[:, :, -1] = phiprime[:, :, 0]\n","            phiprime[:, :, -1] = phi[:, :, 0]\n","            np.roll(phi, 1, axis=2)\n","            np.roll(phiprime, 1, axis=2)\n","\n","            plt.imshow(phi[:,:,f])\n","            plt.colorbar()\n","            plt.show()\n","        else:\n","          phi[:, :, 0] = phiprime[:, :, 0]\n","          phiprime[:, :, 0] = phi[:, :, 0]\n","    return f\n","\n","\n","# Constants\n","M = 250  # tamanho do dominio #250\n","V = 1.0  # potêncial\n","L = 500\n","target = 1e-5  # mínimo\n","delta = 1.0\n","p = 1\n","\n","phi2, phiprime2 = Alpha(M, V, p)\n","p = hate(phi2, phiprime2, delta, M, target, p)\n","\n","phi2, phiprime2 = Alpha(M, V, L)\n","hate(phi2, phiprime2, delta, M, target, p)\n","\n","print(tic)\n","print(time.time() - tic)\n","print(len(phiprime))\n","plt.imshow(phi[:,:,0])\n","plt.colorbar()\n","plt.show()\n","print(g)"]}]}